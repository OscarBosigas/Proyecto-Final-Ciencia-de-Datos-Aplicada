{"version":3,"file":"select-list.mjs","sources":["../src/index.ts"],"sourcesContent":["type Position = 'BEFORE' | 'SELECTED' | 'AFTER';\n\ntype MaybePieces<a> = [a[], a, a[]] | 0;\n\n/**\n * @private\n *\n * @description\n * Search through the pieces of the `SelectList` to find the next selected\n * element. Returns 0 as a Nothing value to the calling function or the\n * pieces to create a new `SelectList`\n */\nlet selectHelp = <A>(\n  predicateFn: (element: A) => boolean,\n  before: A[],\n  selected: A,\n  after: A[]\n): MaybePieces<A> => {\n  // ( [], [] ) ->\n  if (!before.length && !after.length) return 0;\n\n  // ( [], head :: rest ) ->\n  if (!before.length && after.length) {\n    const [head, ...rest] = after;\n\n    if (predicateFn(selected)) return [before, selected, after];\n    else if (predicateFn(head)) return [[...before, selected], head, rest];\n    else {\n      const mP: MaybePieces<A> = selectHelp(predicateFn, [], head, rest);\n\n      if (!mP) return 0;\n      return [[selected, ...mP[0]], mP[1], mP[2]];\n    }\n  }\n\n  // ( head :: rest, _ ) ->\n  const [head, ...rest] = before;\n\n  if (predicateFn(head)) return [[], head, [...rest, selected, ...after]];\n  else {\n    const mP: MaybePieces<A> = selectHelp(predicateFn, rest, selected, after);\n\n    if (!mP) return 0;\n    return [[head, ...mP[0]], mP[1], mP[2]];\n  }\n};\n\n/**\n * @private\n *\n * @description\n * Apply a function to each element in an array by mutating in place\n * The API is somewhat in line with the native `Array.map()`, but\n * instead receives its `Position` type as the third argument\n */\nlet mapWithPosition = <A, B>(\n  array: A[],\n  callback: (element: A, index?: number, position?: Position) => B,\n  position: Position\n): B[] => {\n  for (let i = 0; i < array.length; i++) {\n    // @ts-ignore\n    array[i] = callback(array[i], i, position);\n  }\n  // @ts-ignore\n  return array;\n};\n\n/**\n * @description\n * A nonempty list that will always have one element selected\n *\n * **NOTE**\n * For size and performance reasons, the public properties are not\n * truly immutable, meaning they _can_ be reassigned, but doing so\n * will result in unexpected behavior due to mutations made to\n * internal state. Please treat them as readonly â€” as intended\n */\nclass SelectListImpl<a> {\n  /**\n   * @description\n   * The currently selected element\n   */\n  public readonly selected: a;\n\n  /**\n   * @description\n   * The elements currently in the `before` section of the `SelectList`\n   */\n  public readonly before: a[];\n\n  /**\n   * @description\n   * The elements currently in the `after` section of the `SelectList`\n   */\n  public readonly after: a[];\n\n  /**\n   * @description\n   * The size of the entire collection\n   */\n  public readonly size: number;\n\n  constructor(before: a[], selected: a, after: a[]) {\n    this.before = before;\n    this.selected = selected;\n    this.after = after;\n    this.size = before.length + 1 + after.length;\n  }\n\n  /**\n   * @description\n   * Shift the selected element to the first element which passes\n   * the provided predicate function. If no element is found, the\n   * `SelectList` will not be changed\n   */\n  public select(predicateFn: (element: a) => boolean): SelectListImpl<a> {\n    const mP = selectHelp(predicateFn, this.before, this.selected, this.after);\n\n    if (!mP) return this;\n\n    return SelectList(mP[0], mP[1], mP[2]);\n  }\n\n  /**\n   * @description\n   * Apply a transformation function to each element in the `SelectList`.\n   * The transformation function receives a `Position` based on its current\n   * location in the `SelectList`\n   */\n  public map<b>(fn: (element: a, index?: number, position?: Position) => b): SelectListImpl<b> {\n    return SelectList(\n      mapWithPosition(this.before, fn, 'BEFORE'),\n      fn(this.selected, this.before.length, 'SELECTED'),\n      mapWithPosition(this.after, fn, 'AFTER')\n    );\n  }\n\n  /**\n   * @description\n   * Add elements to the beginning of the `SelectList`\n   */\n  public prepend(arr: a[]) {\n    return SelectList([...arr, ...this.before], this.selected, this.after);\n  }\n\n  /**\n   * @description\n   * Add elements to the end of the `SelectList`\n   */\n  public append(arr: a[]) {\n    return SelectList(this.before, this.selected, [...this.after, ...arr]);\n  }\n\n  /**\n   * @description\n   * Returns the entire collection as a single array\n   */\n  public toArray(): a[] {\n    return [...this.before, this.selected, ...this.after];\n  }\n}\n\n/**\n * @description\n * Wraps call to create new instance of a `SelectList`\n */\nexport default function SelectList<a>(before: a[], selected: a, after: a[]) {\n  return new SelectListImpl(before, selected, after);\n}\n\n// export * from './pure';\n"],"names":["selectHelp","predicateFn","before","selected","after","length","head_1","rest_1","mP","head","rest","mapWithPosition","array","callback","position","i","this","size","SelectListImpl","SelectList","fn","arr"],"mappings":"AAYA,IAAIA,EAAa,SACfC,EACAC,EACAC,EACAC,GAGA,IAAKF,EAAOG,SAAWD,EAAMC,OAAQ,OAAO,EAG5C,IAAKH,EAAOG,QAAUD,EAAMC,OAAQ,CAC3B,IAAAC,OAAMC,aAEb,OAAIN,EAAYE,GAAkB,CAACD,EAAQC,EAAUC,GAC5CH,EAAYK,GAAc,CAAKJ,UAAQC,IAAWG,EAAMC,IAEzDC,EAAqBR,EAAWC,EAAa,GAAIK,EAAMC,IAGtD,EAAEJ,UAAaK,EAAG,IAAKA,EAAG,GAAIA,EAAG,IADxB,EAMb,IAICA,EAJDC,OAAMC,aAEb,OAAIT,EAAYQ,GAAc,CAAC,GAAIA,EAAUC,UAAMP,GAAaC,KAExDI,EAAqBR,EAAWC,EAAaS,EAAMP,EAAUC,IAG5D,EAAEK,UAASD,EAAG,IAAKA,EAAG,GAAIA,EAAG,IADpB,GAahBG,EAAkB,SACpBC,EACAC,EACAC,GAEA,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMP,OAAQU,IAEhCH,EAAMG,GAAKF,EAASD,EAAMG,GAAIA,EAAGD,GAGnC,OAAOF,gBAsCP,WAAYV,EAAaC,EAAaC,GACpCY,KAAKd,OAASA,EACdc,KAAKb,SAAWA,EAChBa,KAAKZ,MAAQA,EACbY,KAAKC,KAAOf,EAAOG,OAAS,EAAID,EAAMC,OAsD1C,OA7CSa,mBAAP,SAAcjB,GACZ,IAAMO,EAAKR,EAAWC,EAAae,KAAKd,OAAQc,KAAKb,SAAUa,KAAKZ,OAEpE,OAAKI,EAEEW,EAAWX,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAFnBQ,MAWXE,gBAAP,SAAcE,GACZ,OAAOD,EACLR,EAAgBK,KAAKd,OAAQkB,EAAI,UACjCA,EAAGJ,KAAKb,SAAUa,KAAKd,OAAOG,OAAQ,YACtCM,EAAgBK,KAAKZ,MAAOgB,EAAI,WAQ7BF,oBAAP,SAAeG,GACb,OAAOF,EAAeE,SAAQL,KAAKd,QAASc,KAAKb,SAAUa,KAAKZ,QAO3Dc,mBAAP,SAAcG,GACZ,OAAOF,EAAWH,KAAKd,OAAQc,KAAKb,SAAca,KAAKZ,aAAUiB,KAO5DH,oBAAP,WACE,OAAWF,KAAKd,eAAQc,KAAKb,UAAaa,KAAKZ,aAQnD,SAAwBe,EAAcjB,EAAaC,EAAaC,GAC9D,OAAO,IAAIc,EAAehB,EAAQC,EAAUC"}